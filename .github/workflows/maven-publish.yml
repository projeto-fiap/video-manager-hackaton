name: pipeline

on:
  push:
  pull_request:
    types:
      - closed
      - opened
      - synchronize
      - reopened

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Clean and Compile
        run: mvn clean compile

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Unit Tests
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn test org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -DsonarToken=$SONAR_TOKEN

  analysis-sonarqube:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Sonar Build Breaker
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        uses: jkumar19/sonar-build-breaker@v1.0.0
        with:
          sonar_url: "https://sonarcloud.io"
          sonar_branch: ${{ github.event.pull_request.head.ref || github.ref_name }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          project_key: "projeto-fiap_video-manager-hackaton"

  send-docker-hub:
    name: Send Docker HUB
    runs-on: ubuntu-latest
    needs:
      - analysis-sonarqube
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Clone Repository
        run: git clone https://github.com/projeto-fiap/video-manager-hackaton.git && cd video-manager-hackaton && docker build . -t matheuspatricio0/video-manager-hackaton:latest
      - name: Push Docker image
        run: docker push matheuspatricio0/video-manager-hackaton:latest

  deploy-dev:
    runs-on: ubuntu-latest
    environment:
      name: dev
    needs:
      - send-docker-hub
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy
        shell: bash
        run: echo "Deploy DEV"

  deploy-hml:
    runs-on: ubuntu-latest
    environment:
      name: hml
    needs:
      - send-docker-hub
    if: github.ref == 'refs/heads/release'
    steps:
      - name: Deploy
        shell: bash
        run: echo "Deploy HML"

  deploy-prd:
    runs-on: ubuntu-latest
    environment:
      name: prd
    needs:
      - send-docker-hub
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Export AWS environment variables
        run: |
          echo "KEYCLOAK_BASE_URL=${{ secrets.KEYCLOAK_BASE_URL }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "KAFKA_SERVER=${{ secrets.KAFKA_SERVER }}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_LAMBDA_FUNCTION_NAME=${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}" >> $GITHUB_ENV

      - name: Update Kube Config
        run: |
          aws eks update-kubeconfig --name kubernetes-video-manager-hackaton --region us-east-2

      - name: Deploy Kubernetes Resources
        run: |
          kubectl apply -f src/main/resources/deploy/k8s/video-manager-deployment.yaml -n default-namespace
          kubectl apply -f src/main/resources/deploy/k8s/video-manager-hpa.yaml -n default-namespace
          kubectl apply -f src/main/resources/deploy/k8s/video-manager-service.yaml -n default-namespace