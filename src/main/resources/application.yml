server:
  port: 8082

spring:
  servlet:
    multipart:
      enabled: true
      max-file-size: 500MB
      max-request-size: 500MB
  kafka:
    bootstrap-servers: ${KAFKA_SERVER}

    consumer:
      group-id: video-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      enable-auto-commit: true
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: tech.fiap.project.domain.VideoProducerDTO
        spring.json.use.type.headers: false
        max.partition.fetch.bytes: 200000000
        fetch.max.bytes: 200000000

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        max.request.size: 200000000
        spring.json.add.type.headers: false

    properties:
      max.request.size: 200000000
      fetch.message.max.bytes: 200000000

privateaws:
  accessKey: ${AWS_PRIVATE_ACCESS_KEY_ID}
  secretKey: ${AWS_PRIVATE_SECRET_ACCESS_KEY}
  region: ${AWS_PRIVATE_REGION}
  s3:
    bucketName: ${AWS_PRIVATE_S3_BUCKET_NAME}
  lambda:
    functionName: ${AWS_PRIVATE_LAMBDA_FUNCTION_NAME}

kafka:
  server: ${KAFKA_SERVER}

logging:
  level:
    root: INFO
    org.springframework: WARN
    com.amazonaws: WARN
    org.apache.kafka: WARN
    org.springframework.kafka: WARN
    org.springframework.boot.autoconfigure: ERROR
